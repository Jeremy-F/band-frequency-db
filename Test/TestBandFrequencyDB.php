<?php

use Jeremyfornarino\Band\BandFrequency;
use Jeremyfornarino\Band\BandFrequencyDB;
use PHPUnit\Framework\TestCase;

require_once __DIR__."/../vendor/autoload.php";

class TestBandFrequencyDB extends TestCase {

    /** @var BandFrequencyDB */
    private $bandFrequencyDB;

    public function setUp(){
        parent::setUp(); // TODO: Change the autogenerated stub
        $fileName = "";
        do $fileName .= uniqid(rand(0,1000)); while(file_exists($fileName));
        $this->bandFrequencyDB  = new BandFrequencyDB($fileName);
    }

    public function testDatabaseFileCreation(){
        $this->bandFrequencyDB->loadDatabase();
        $filePath = $this->bandFrequencyDB->getDbFilePath();
        $this->assertTrue(file_exists($filePath));

        $this->testAddBandToDatabase();

        $this->bandFrequencyDB->saveDatabase();

        $newBandFrequencyDB = new BandFrequencyDB($filePath);
        $newBandFrequencyDB->loadDatabase();
        $this->assertEquals(1, count($newBandFrequencyDB->getBandsFrequency()));
        $this->assertTrue($this->bandFrequencyDB->equal($newBandFrequencyDB));
        unlink($filePath);
    }
    public function testAddBandToDatabase(){
        $band = new BandFrequency("test", "100", "200", 390, 1000);
        $this->bandFrequencyDB->addBand($band);
        $this->assertSame(1, count($this->bandFrequencyDB->getBandsFrequency()));
        $this->assertTrue($band->equal($this->bandFrequencyDB->getBandsFrequency()[0]));
        return $band;
    }

    public function testRemoveBandFromDatabase(){
        $band = $this->testAddBandToDatabase();
        $this->bandFrequencyDB->removeBand($band);
        $this->assertSame(0, count($this->bandFrequencyDB->getBandsFrequency()));
    }

    public function testEqual(){
        $band = new BandFrequency("test", 1, 2, 3, 4);
        $bfdb = new BandFrequencyDB("test");

        $this->assertFalse($bfdb->equal(null));
        $this->assertFalse($bfdb->equal([]));
        $this->assertTrue($bfdb->equal($bfdb));

        $bfdb1 = new BandFrequencyDB("test");
        $this->assertTrue($bfdb->equal($bfdb1));

        $bfdb->addBand($band);
        $this->assertFalse($bfdb->equal($bfdb1));

        $bfdb2 = new BandFrequencyDB("test_bad");
        $this->assertFalse($bfdb1->equal($bfdb2));

        $bfdb1->addBand($band);
        $this->assertTrue($bfdb->equal($bfdb1));

        $bfdb1->addBand($band);
        $this->assertFalse($bfdb->equal($bfdb1));
    }
}